"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
exports.__esModule = true;
exports.normalize = void 0;
var convert_1 = require("@shootismoke/convert");
var util_1 = require("../../util");
var normalize_1 = require("../aqicn/normalize");
/**
 * Normalize aqicn byGps data. Throws an error if the data is invalid.
 *
 * @param data - The data to normalize
 */
function normalize(_a) {
    var _b = __read(_a.d, 1), data = _b[0];
    var stationId = "waqi|".concat(data.x);
    if (!(0, convert_1.isPollutant)(data.pol)) {
        throw (0, util_1.providerError)('waqi', "Cannot normalize station ".concat(stationId, ", unrecognized pollutant ").concat(data.pol, ": ").concat(JSON.stringify(data)));
    }
    var aqiUS = +data.v;
    // Calculate pm25 ugm3 value to get cigarettes value
    var ugm3Value = (0, convert_1.convert)('pm25', 'usaEpa', convert_1.ugm3, aqiUS);
    if (!data.u.includes('/')) {
        throw (0, util_1.providerError)('waqi', "Got invalid country/city info: ".concat(JSON.stringify(data.u)));
    }
    var _c = __read(data.u.split('/'), 2), country = _c[0], city = _c[1];
    var countryRaw = (0, normalize_1.sanitizeCountry)(country);
    // Get UTC time
    var utc = new Date(+data.t * 1000).toISOString();
    var countryCode = (0, util_1.getCountryCode)(countryRaw);
    if (!countryCode) {
        throw (0, util_1.providerError)('waqi', "Cannot get code from country ".concat(country));
    }
    return [
        {
            attribution: [{ name: data.nlo }],
            averagingPeriod: {
                unit: 'day',
                value: 1
            },
            coordinates: {
                latitude: data.geo[0],
                longitude: data.geo[1]
            },
            country: country,
            city: city,
            date: {
                local: utc,
                utc: utc
            },
            entity: 'other',
            location: "waqi|".concat(data.x),
            isMobile: false,
            parameter: data.pol,
            sourceName: 'waqi',
            unit: convert_1.ugm3,
            value: ugm3Value
        },
    ];
}
exports.normalize = normalize;
