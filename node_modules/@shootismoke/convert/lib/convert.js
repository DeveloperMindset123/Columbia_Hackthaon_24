"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.convert = void 0;
var aqiCodes = __importStar(require("./aqi"));
var unit_1 = require("./util/unit");
/**
 * For any pollutant, convert an AQI to its ugm3 concentration, or vice versa,
 * or convert an AQI to another AQI
 *
 * @param pollutant - The pollutant to convert
 * @param from - The type to convert from (either ugm3, or an AQI)
 * @param to - The type to convert to (either ugm3, or an AQI)
 * @param value - The value to convert
 */
function convert(pollutant, from, to, value) {
    if (from === 'ppb' ||
        from === 'ppm' ||
        from === 'particles/cm³' ||
        to === 'ppb' ||
        to === 'ppm' ||
        to === 'particles/cm³') {
        throw new Error("Conversion from ".concat(from, " to ").concat(to, " not supported yet."));
    }
    if (from === to) {
        return value;
    }
    // Convert ugm3 to AQI
    if (from === unit_1.ugm3) {
        return aqiCodes[to].fromUgm3(pollutant, value);
    }
    // Convert AQI to ugm3
    if (to === unit_1.ugm3) {
        return aqiCodes[from].toUgm3(pollutant, value);
    }
    // Convert AQI to AQI
    var ugm3Value = aqiCodes[from].toUgm3(pollutant, value);
    return aqiCodes[to].fromUgm3(pollutant, ugm3Value);
}
exports.convert = convert;
