"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.isPollutant = exports.getPollutantMeta = exports.AllPollutants = void 0;
var openaq_json_1 = __importDefault(require("./openaq.json"));
var unit_1 = require("./unit");
/**
 * All the pollutants tracked by @shootismoke.
 *
 * @ignore
 */
var Pollutants = __assign(__assign({}, openaq_json_1["default"]), { c6h6: {
        name: 'c6h6',
        displayName: 'C6H6',
        description: 'Benzene',
        preferredUnit: unit_1.ugm3,
        isCore: false,
        maxColorValue: null
    }, ox: {
        name: 'ox',
        displayName: 'Ox',
        description: 'Photochemical oxidants',
        preferredUnit: unit_1.ppb,
        isCore: false,
        maxColorValue: null
    }, nh3: {
        name: 'nh3',
        displayName: 'NH3',
        description: 'Ammonia',
        preferredUnit: unit_1.ppb,
        isCore: false,
        maxColorValue: null
    }, nmhc: {
        name: 'nmhc',
        displayName: 'NMHC',
        description: 'Non-methane hydrocarbons',
        preferredUnit: unit_1.ppb,
        isCore: false,
        maxColorValue: null
    }, trs: {
        name: 'trs',
        displayName: 'TRS',
        description: 'Total reduced sulfur',
        preferredUnit: unit_1.ugm3,
        isCore: false,
        maxColorValue: null
    } });
/**
 * Array of all pollutants tracked by @shootismoke. This list is fetched from:
 * https://docs.openaq.org/v2/parameters
 */
exports.AllPollutants = Object.keys(Pollutants);
/**
 * Get metadata (code, name, description, unit) for a pollutant. This list is fetched from:
 * https://docs.openaq.org/v2/parameters
 *
 * @param pollutant - The pollutant to get the metadata from.
 */
function getPollutantMeta(pollutant) {
    return Pollutants[pollutant];
}
exports.getPollutantMeta = getPollutantMeta;
/**
 * Check if the input pollutant is a recognized pollutant which we can convert
 * AQI to/from concentrations. This list is fetched from:
 * https://docs.openaq.org/v2/parameters
 *
 * @param pollutant - The pollutant to test.
 */
function isPollutant(pollutant) {
    return exports.AllPollutants.includes(pollutant);
}
exports.isPollutant = isPollutant;
