"use strict";
exports.__esModule = true;
exports.fetchByStation = exports.fetchByGps = void 0;
var util_1 = require("../../util");
var fetch_1 = require("../../util/fetch");
var RESULT_LIMIT = 10;
var OPENAQ_MEASUREMENTS_V2 = "https://api.openaq.org/v2/measurements";
function additionalOptions(options) {
    if (options === void 0) { options = {}; }
    var query = '';
    // dateFrom
    if (options.dateFrom) {
        query += "&date_from=".concat(options.dateFrom.toISOString());
    }
    // dateTo
    if (options.dateTo) {
        query += "&date_to=".concat(options.dateTo.toISOString());
    }
    // includeFields
    // We add attribution by default
    query += "&include_fields=".concat((options.includeFields || ['attribution']).join(','));
    // limit
    query += "&limit=".concat(options.limit || RESULT_LIMIT);
    // parameter
    query += (options.parameter || []).map(function (p) { return "&parameter[]=".concat(p); }).join('');
    return query;
}
/**
 * Handle error from OpenAQ response
 */
function formatError(err) {
    var _a;
    // We had occasions from OpenAQ where the error had an empty response field
    // so we check that the data is populated first.
    if ((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.data) {
        var e = err.response.data;
        if (e.detail) {
            return new Error(e.detail.map(function (err) { return JSON.stringify(err); }).join(', '));
        }
        else {
            return new Error(err.response.data);
        }
    }
    return new Error(JSON.stringify(err));
}
/**
 * Fetch the closest station to the user's current position
 *
 * @param gps - Latitude and longitude of the user's current position
 */
function fetchByGps(gps, options) {
    // OpenAQ doesn't allow arbitrary number of decimals, we round to 3.
    var latitude = Math.round(gps.latitude * 1000) / 1000;
    var longitude = Math.round(gps.longitude * 1000) / 1000;
    return (0, fetch_1.fetchAndDecode)("".concat(OPENAQ_MEASUREMENTS_V2, "?coordinates=").concat(latitude, ",").concat(longitude, "&radius=").concat(util_1.ACCURATE_RADIUS).concat(additionalOptions(options)), { formatError: formatError });
}
exports.fetchByGps = fetchByGps;
/**
 * Fetch data by station
 *
 * @param stationId - The station ID to search
 */
function fetchByStation(stationId, options) {
    return (0, fetch_1.fetchAndDecode)("".concat(OPENAQ_MEASUREMENTS_V2, "?location=").concat(stationId).concat(additionalOptions(options)), { formatError: formatError });
}
exports.fetchByStation = fetchByStation;
