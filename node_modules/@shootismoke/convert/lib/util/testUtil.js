"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.testConvert = void 0;
var aqiCodes = __importStar(require("../aqi"));
var convert_1 = require("../convert");
var breakpoints_1 = require("./breakpoints");
var pollutant_1 = require("./pollutant");
/**
 * Small utility function to step AQI/ugm3 conversions for a pollutant
 */
function testConvert(aqiCode, pollutant, aqi, ugm3) {
    it("should convert ".concat(pollutant, ": ").concat(aqiCodes[aqiCode].displayName, " ").concat(aqi, " = ").concat(ugm3).concat((0, pollutant_1.getPollutantMeta)(pollutant).preferredUnit), function () {
        // Sometimes, because of rounding, the values are not exact. We just want
        // them to be exact at +/-0.2
        expect((0, breakpoints_1.round)(Math.abs((0, convert_1.convert)(pollutant, aqiCode, 'µg/m³', aqi) - ugm3), 1)).toBeLessThanOrEqual(0.2);
        expect((0, breakpoints_1.round)(Math.abs((0, convert_1.convert)(pollutant, 'µg/m³', aqiCode, ugm3) - aqi), 1)).toBeLessThanOrEqual(0.2);
    });
}
exports.testConvert = testConvert;
