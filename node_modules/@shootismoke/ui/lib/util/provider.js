"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.fetchStationId = void 0;
var dataproviders_1 = require("@shootismoke/dataproviders");
var async_retry_1 = __importDefault(require("async-retry"));
var api_1 = require("./api");
var AllProviders = ['aqicn', 'openaq', 'waqi'];
/**
 * Given some normalized data points, filter out the first one that contains
 * pm25 data. Returns a TaskEither left is none is found, or format the data
 * into the Api interface
 *
 */
function providerFetch(provider, station) {
    return __awaiter(this, void 0, void 0, function () {
        var results, _a, _b, _c, _d, _e, _f, _g, _h;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    if (!(provider === 'aqicn')) return [3 /*break*/, 2];
                    _c = (_b = dataproviders_1.aqicn).normalize;
                    return [4 /*yield*/, dataproviders_1.aqicn.fetchByStation(station, {
                            token: process.env.BACKEND_AQICN_TOKEN
                        })];
                case 1:
                    _a = _c.apply(_b, [_j.sent()]);
                    return [3 /*break*/, 7];
                case 2:
                    if (!(provider === 'waqi')) return [3 /*break*/, 4];
                    _f = (_e = dataproviders_1.waqi).normalize;
                    return [4 /*yield*/, dataproviders_1.waqi.fetchByStation(station)];
                case 3:
                    _d = _f.apply(_e, [_j.sent()]);
                    return [3 /*break*/, 6];
                case 4:
                    _h = (_g = dataproviders_1.openaq).normalize;
                    return [4 /*yield*/, dataproviders_1.openaq.fetchByStation(station, {
                            limit: 1,
                            parameter: ['pm25']
                        })];
                case 5:
                    _d = _h.apply(_g, [_j.sent()]);
                    _j.label = 6;
                case 6:
                    _a = _d;
                    _j.label = 7;
                case 7:
                    results = _a;
                    // Gps coordinates are irrelevant for expo report.
                    return [2 /*return*/, (0, api_1.createApi)({ latitude: 0, longitude: 0 }, results)];
            }
        });
    });
}
function assertKnownProvider(provider, stationId) {
    if (!AllProviders.includes(provider)) {
        throw new Error("Unrecognized stationId \"".concat(stationId, "\"."));
    }
}
/**
 * Fetch data from correct provider, based on stationId.
 *
 * @param stationId - The stationId of the station
 */
function fetchStationId(stationId, options) {
    var _this = this;
    var _a = __read(stationId.split('|'), 2), provider = _a[0], station = _a[1];
    assertKnownProvider(provider, stationId);
    // Find the cigarettes at the user's last known station (stationId)
    // If anything throws, we retry, up to 5 times.
    return (0, async_retry_1["default"])(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, providerFetch(provider, station)];
    }); }); }, options);
}
exports.fetchStationId = fetchStationId;
