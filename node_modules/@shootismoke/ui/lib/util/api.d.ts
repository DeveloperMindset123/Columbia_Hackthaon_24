import type { AqicnOptions, LatLng, OpenAQOptions, OpenAQResult, OpenAQResults } from '@shootismoke/dataproviders';
/**
 * Api is basically the normalized data from '@shootismoke/dataproviders',
 * where we make sure to add cigarette conversion. An API is returned only when
 * there is PM2.5 data (even inacurrate.)
 */
export interface Api {
    /**
     * All results (normalized) returned by the provider.
     */
    results: OpenAQResults;
    /**
     * Raw data corresponding to the PM2.5 pollutant.
     */
    pm25: OpenAQResult;
    /**
     * Data used by shootismoke frontends.
     */
    shootismoke: {
        /**
         * The amount of cigarettes converted from the PM2.5 level.
         */
        dailyCigarettes: number;
        /**
         * The distance to the closest station where PM2.5 level can be
         * measured.
         */
        distanceToStation: number;
        /**
         * Whether the pm25 level is accuruate. This happens when the station
         * from which the measurement took place is not too far.
         */
        isAccurate: boolean;
    };
}
/**
 * Round a number to 1 decimal. Useful for showing cigarettes on the home page.
 *
 * @param n - The number to round;
 */
export declare function round(n: number): number;
/**
 * Given some results data points, and the current GPS, construct an API
 * object with sanitized data.
 *
 * @param results - The results results data to process
 */
export declare function createApi(gps: LatLng, results: OpenAQResults, now?: Date): Api;
/**
 * Options to be passed into the {@link raceApiPromise} function.
 */
interface RaceApiOptions {
    aqicn?: AqicnOptions;
    openaq?: OpenAQOptions;
}
/**
 * Fetch data parallely from difference data sources, and return the first
 * response as an {@link Api} format.
 *
 * @param gps - The GPS coordinates to fetch data for
 */
export declare function raceApiPromise(gps: LatLng, options: RaceApiOptions): Promise<Api>;
export {};
