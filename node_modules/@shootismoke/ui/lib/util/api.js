"use strict";
// Sh**t! I Smoke
// Copyright (C) 2018-2021  Marcelo S. Coelho, Amaury M.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.raceApiPromise = exports.createApi = exports.round = void 0;
// Sh**t! I Smoke is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// Sh**t! I Smoke is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with Sh**t! I Smoke.  If not, see <http://www.gnu.org/licenses/>.
var convert_1 = require("@shootismoke/convert");
var dataproviders_1 = require("@shootismoke/dataproviders");
var date_fns_1 = require("date-fns");
var debug_1 = __importDefault(require("debug"));
var p_any_1 = __importDefault(require("p-any"));
var secretSauce_1 = require("./secretSauce");
var station_1 = require("./station");
var l = (0, debug_1["default"])('shootismoke:ui:api');
/**
 * Round a number to 1 decimal. Useful for showing cigarettes on the home page.
 *
 * @param n - The number to round;
 */
function round(n) {
    return (0, convert_1.round)(n, 1);
}
exports.round = round;
/**
 * We show pm25 results within this number of hours. More than this, we
 * consider the results as inaccurate.
 */
var RESULTS_WITHIN_HOURS = 6;
/**
 * Given some results data points, and the current GPS, construct an API
 * object with sanitized data.
 *
 * @param results - The results results data to process
 */
function createApi(gps, results, now) {
    if (now === void 0) { now = new Date(); }
    var sanitizedResults = results
        // From the results results, remove the entries that are too old.
        .filter(function (_a) {
        var date = _a.date;
        return Math.abs((0, date_fns_1.differenceInHours)(new Date(date.utc), now)) <=
            RESULTS_WITHIN_HOURS;
    })
        // Remove the entries that are negative (happens on openaq).
        .filter(function (_a) {
        var value = _a.value;
        return value >= 0;
    });
    // Filter pm25 pollutants with the correct unit.
    var pm25 = sanitizedResults.filter(function (_a) {
        var parameter = _a.parameter, unit = _a.unit;
        return parameter === 'pm25' && unit === convert_1.ugm3;
    });
    // TODO We can also sort the pm25 array by closest to `gps`.
    if (pm25.length) {
        return {
            results: sanitizedResults,
            pm25: pm25[0],
            shootismoke: {
                dailyCigarettes: (0, secretSauce_1.pm25ToCigarettes)(pm25[0].value),
                distanceToStation: (0, station_1.distanceToStation)(gps, pm25[0]),
                isAccurate: !(0, station_1.isStationTooFar)(gps, pm25[0])
            }
        };
    }
    else {
        throw new Error("Station ".concat(results[0].location, " does not have PM2.5 measurings right now"));
    }
}
exports.createApi = createApi;
/**
 * Helper function to fetch & normalize data for 1 provider.
 */
function fetchForProvider(gps, provider, options) {
    return __awaiter(this, void 0, void 0, function () {
        var data, results;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, provider.fetchByGps(gps, options)];
                case 1:
                    data = _a.sent();
                    results = provider.normalize(data);
                    l("Got data from ".concat(provider.id, ": ").concat(JSON.stringify(results)));
                    return [2 /*return*/, results];
            }
        });
    });
}
/**
 * Fetch data parallely from difference data sources, and return the first
 * response as an {@link Api} format.
 *
 * @param gps - The GPS coordinates to fetch data for
 */
function raceApiPromise(gps, options) {
    var now = new Date();
    // Run these tasks parallely
    var tasks = [
        fetchForProvider(gps, dataproviders_1.aqicn, options.aqicn).then(function (results) {
            return createApi(gps, results);
        }),
        fetchForProvider(gps, dataproviders_1.openaq, __assign({ dateFrom: (0, date_fns_1.subHours)(now, RESULTS_WITHIN_HOURS) }, options.openaq)).then(function (results) { return createApi(gps, results); }),
    ];
    return (0, p_any_1["default"])(tasks)["catch"](function (errors) {
        // Transform an AggregateError into a JS native Error
        var aggregateMessage = __spreadArray([], __read(errors), false).map(function (_a, index) {
            var message = _a.message;
            return "".concat(index + 1, ". ").concat(message);
        })
            .join('. ');
        throw new Error(aggregateMessage);
    });
}
exports.raceApiPromise = raceApiPromise;
